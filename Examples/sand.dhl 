
INPUT;
OUTPUT cells[2][2];
N = 2;
comp Range(n: numeral) -> any {
    i = 0;
    l = [];
    foreach _: [bool; n] {
        l = [..l, i];
        i = inc(i);
    }
    l
}
comp or(vals: any) -> bool {
    so_far = false;
    foreach val: vals {
        so_far = select(val, true, so_far);
    }
    so_far
}
comp and(vals: any) -> bool {
    so_far = true;
    foreach val: vals {
        so_far = select(val, so_far, false);
    }
    so_far
}
comp not(val: bool) -> bool {
    select(val, false, true)
}
comp cell(
    up_left: bool,
    up: bool,
    up_right: bool,
    left_left: bool,
    left: bool,
    center: bool,
    right: bool,
    down_left: bool,
    down: bool,
    down_right: bool
) -> bool {
    or([
        up,
        and([up_left, left, left_left]),
        and([up_right, right]),
        and([
            center, not(or([down_left, down, down_right]))
        ])
    ])
}
comp eq(n1: numeral, n2: numeral) -> bool {
    if is_zero(n1) {
        val = is_zero(n2);
    }
    if is_zero(n2) {
        val = is_zero(n1);
    }
    if and([not(is_zero(n1)), not(is_zero(n2))]) {
        val = eq(dec(n1), dec(n2));
    }
    val
}
comp update_cells(cells: [[bool; N]; N]) -> [[bool; N]; N] {
    map y: Range(N) map x: Range(N) {
        up_left = false;
        up = false;
        up_right = false;
        left_left = false;
        left = false;
        center = false;
        right = false;
        down_left = false;
        down = false;
        down_right = false;
        if not(is_zero(x)) {
            left = cells[dec(x)][y];
            if not(is_zero(y)) {
                up_left = cells[dec(x)][dec(y)];
            }
            if not(eq(inc(y), N)) {
                down_left = cells[dec(x)][inc(y)];
            }
            if not(is_zero(dec(x))) {
                left_left = cells[dec(dec(x))][y];
            }
        }
        if not(eq(inc(x), N)) {
            right = cells[inc(x)][y];
            if not(is_zero(y)) {
                up_right = cells[inc(x)][dec(y)];
            }
            if not(eq(y, dec(N))) {
                down_right = cells[inc(x)][inc(y)];
            }
        }
        center = cells[x][y];
        if not(is_zero(y)) {
            up = cells[x][dec(y)];
        }
        if not(eq(y, dec(N))) {
            down = cells[x][inc(y)];
        }
        cell(
            up_left,
            up,
            up_right,
            left_left,
            left,
            center,
            right,
            down_left,
            down,
            down_right,
        )
    }
}
cells = update_cells(@[[bool; N]; N]);
